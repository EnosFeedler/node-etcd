// Generated by CoffeeScript 1.6.1
(function() {
  var Etcd, Watcher, exports, request, _,
    _this = this;

  request = require('request');

  _ = require('underscore');

  Watcher = require('./watcher');

  Etcd = (function() {

    function Etcd(host, port) {
      var _this = this;
      this.host = host != null ? host : '127.0.0.1';
      this.port = port != null ? port : '4001';
      this.watcher = function(key, index) {
        if (index == null) {
          index = null;
        }
        return Etcd.prototype.watcher.apply(_this, arguments);
      };
    }

    Etcd.prototype.get = function(key, callback) {
      var opt;
      opt = this._prepareOpts("keys/" + this._stripSlashPrefix(key));
      return request.get(opt, this._responseHandler(callback));
    };

    Etcd.prototype.set = function(key, value, callback) {
      return this.setCustom(key, value, {}, callback);
    };

    Etcd.prototype.setTTL = function(key, value, ttl, callback) {
      return this.setCustom(key, value, {
        ttl: ttl
      }, callback);
    };

    Etcd.prototype.setTest = function(key, value, prevValue, callback) {
      return this.setCustom(key, value, {
        prevValue: prevValue
      }, callback);
    };

    Etcd.prototype.setTestTTL = function(key, value, prevValue, ttl, callback) {
      return this.setCustom(key, value, {
        prevValue: prevValue,
        ttl: ttl
      }, callback);
    };

    Etcd.prototype.setCustom = function(key, value, extraopts, callback) {
      var opt;
      opt = this._prepareOpts("keys/" + this._stripSlashPrefix(key));
      _.extend(opt, {
        form: {
          value: value
        }
      });
      if (extraopts != null) {
        _.extend(opt.form, extraopts);
      }
      return request.post(opt, this._responseHandler(callback));
    };

    Etcd.prototype.del = function(key, callback) {
      var opt;
      opt = this._prepareOpts("keys/" + this._stripSlashPrefix(key));
      return request.del(opt, this._responseHandler(callback));
    };

    Etcd.prototype.watch = function(key, callback) {
      var opt;
      opt = this._prepareOpts("watch/" + this._stripSlashPrefix(key));
      return request.get(opt, this._responseHandler(callback));
    };

    Etcd.prototype.watchIndex = function(key, index, callback) {
      return this.watchCustom(key, {
        index: index
      }, callback);
    };

    Etcd.prototype.watchCustom = function(key, opts, callback) {
      var opt;
      opt = this._prepareOpts("watch/" + this._stripSlashPrefix(key));
      if (opts != null) {
        _.extend(opt, {
          form: opts
        });
      }
      return request.post(opt, this._responseHandler(callback));
    };

    Etcd.prototype.watcher = function(key, index) {
      if (index == null) {
        index = null;
      }
      return new Watcher(this, key, index);
    };

    Etcd.prototype.machines = function(callback) {
      var opt;
      opt = this._prepareOpts("keys/_etcd/machines");
      return request.get(opt, this._responseHandler(callback));
    };

    Etcd.prototype.leader = function(callback) {
      var opt;
      opt = this._prepareOpts("leader", "");
      return request.get(opt, this._responseHandler(callback));
    };

    Etcd.prototype.version = function(callback) {
      var opt;
      opt = this._prepareOpts("", "");
      return request.get(opt, this._responseHandler(callback));
    };

    Etcd.prototype._stripSlashPrefix = function(key) {
      return key.replace(/^\//, '');
    };

    Etcd.prototype._prepareOpts = function(url, apiVersion) {
      var opt;
      if (apiVersion == null) {
        apiVersion = "/v1";
      }
      return opt = {
        url: "http://" + this.host + ":" + this.port + apiVersion + "/" + url,
        json: true
      };
    };

    Etcd.prototype._responseHandler = function(callback) {
      return function(err, resp, body) {
        if ((body != null) && (body.errorCode != null)) {
          return callback(body, "");
        } else {
          return callback(err, body);
        }
      };
    };

    return Etcd;

  })();

  exports = module.exports = Etcd;

}).call(this);
